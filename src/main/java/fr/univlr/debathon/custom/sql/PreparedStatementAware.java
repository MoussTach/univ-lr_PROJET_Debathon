package fr.univlr.debathon.custom.sql;

import javafx.util.Pair;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Date;
import java.sql.*;
import java.util.*;

/**
 * A modified PrepareStatement to be able to know the parameter when the sql string is created.
 * Can print the sql sentence.
 *
 * @author Gaetan Brenckle
 */
public class PreparedStatementAware implements PreparedStatement {
    private final PreparedStatement delegate;
    private final Map<Integer,AwareSqlValue> parameterMap;

    private int autoIncrement = 1;

    public enum listType {
        STRING,
        INT,
        DOUBLE,
        LONG,
        BOOLEAN,
        DATE
    }

    public PreparedStatementAware(PreparedStatement delegate) {
        this.delegate = delegate;
        this.parameterMap = new HashMap<>();
    }


    @Override
    public void addBatch() throws SQLException {
        delegate.addBatch();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        delegate.addBatch(sql);
    }

    @Override
    public void cancel() throws SQLException {
        delegate.cancel();
    }

    @Override
    public void clearBatch() throws SQLException {
        delegate.clearBatch();
    }

    @Override
    public void clearParameters() throws SQLException {
        delegate.clearParameters();
    }

    @Override
    public void clearWarnings() throws SQLException {
        delegate.clearWarnings();
    }

    @Override
    public void close() throws SQLException {
        delegate.close();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        delegate.closeOnCompletion();
    }

    @Override
    public boolean execute() throws SQLException {
        return delegate.execute();
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return delegate.execute(sql);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return delegate.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return delegate.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return delegate.execute(sql, columnNames);
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return delegate.executeBatch();
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        return delegate.executeQuery();
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return delegate.executeQuery(sql);
    }

    @Override
    public int executeUpdate() throws SQLException {
        return delegate.executeUpdate();
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return delegate.executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return delegate.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return delegate.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return delegate.executeUpdate(sql, columnNames);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return delegate.getConnection();
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return delegate.getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException {
        return delegate.getFetchSize();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return delegate.getGeneratedKeys();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return delegate.getMaxFieldSize();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return delegate.getMaxRows();
    }

    @Override
    public ResultSetMetaData getMetaData() throws SQLException {
        return delegate.getMetaData();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return delegate.getMoreResults();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return delegate.getMoreResults(current);
    }

    @Override
    public ParameterMetaData getParameterMetaData() throws SQLException {
        return delegate.getParameterMetaData();
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return delegate.getQueryTimeout();
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return delegate.getResultSet();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return delegate.getResultSetConcurrency();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return delegate.getResultSetHoldability();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return delegate.getResultSetType();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return delegate.getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return delegate.getWarnings();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return delegate.isClosed();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return delegate.isCloseOnCompletion();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return delegate.isPoolable();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return delegate.isWrapperFor(iface);
    }

    public static String prepareList(List<?> listKey) {

        if (listKey.size() <= 0) {
            return null;
        }

        StringBuilder sbuilder = new StringBuilder();
        for (Object key : listKey) {
            sbuilder.append("?,");
        }
        if (sbuilder.lastIndexOf(",") != -1) {
            sbuilder.delete(sbuilder.lastIndexOf(","), sbuilder.length());
        }
        return sbuilder.toString();
    }

    public void setList(List<?> list, listType type) throws SQLException {

        for (Object key: list) {
            switch (type) {
                case STRING:
                    setString(autoIncrement++, String.valueOf(key));
                    break;
                case INT:
                    setInt(autoIncrement++, Integer.parseInt(String.valueOf(key)));
                    break;
                case DOUBLE:
                    setDouble(autoIncrement++, Double.parseDouble(String.valueOf(key)));
                    break;
                case LONG:
                    setLong(autoIncrement++, Long.parseLong(String.valueOf(key)));
                    break;
                case BOOLEAN:
                    setBoolean(autoIncrement++, Boolean.parseBoolean(String.valueOf(key)));
                    break;
                case DATE:
                    setDate(autoIncrement++, Date.valueOf(String.valueOf(key)));
                    break;
            }
        }
    }

    @Override
    public void setArray(int parameterIndex, Array x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Array", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setArray(parameterIndex, x);
    }

    public void setAsciiStream(InputStream x) throws SQLException {
        setAsciiStream(autoIncrement++, x);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("InputStream", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setAsciiStream(parameterIndex, x);
    }

    public void setAsciiStream(InputStream x, int length) throws SQLException {
        setAsciiStream(autoIncrement++, x, length);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("InputStream", x.toString()));
        awareSqlValue.addValue(new Pair<>("length", Integer.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setAsciiStream(parameterIndex, x);
    }

    public void setAsciiStream(InputStream x, long length) throws SQLException {
        setAsciiStream(autoIncrement++, x, length);
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("InputStream", x.toString()));
        awareSqlValue.addValue(new Pair<>("length", Long.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setAsciiStream(parameterIndex, x, length);
    }

    public void setBigDecimal(BigDecimal x) throws SQLException {
        setBigDecimal(autoIncrement++, x);
    }

    @Override
    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("BigDecimal", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setBigDecimal(parameterIndex, x);
    }

    public void setBinaryStream(InputStream x) throws SQLException {
        setBinaryStream(autoIncrement++, x);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("InputStream", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setBinaryStream(parameterIndex, x);
    }

    public void setBinaryStream(InputStream x, int length) throws SQLException {
        setBinaryStream(autoIncrement++, x, length);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("InputStream", x.toString()));
        awareSqlValue.addValue(new Pair<>("length", Integer.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setBinaryStream(parameterIndex, x);
    }

    public void setBinaryStream(InputStream x, long length) throws SQLException {
        setBinaryStream(autoIncrement++, x, length);
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("InputStream", x.toString()));
        awareSqlValue.addValue(new Pair<>("length", Long.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setBinaryStream(parameterIndex, x, length);
    }

    public void setBlob(Blob x) throws SQLException {
        setBlob(autoIncrement++, x);
    }

    @Override
    public void setBlob(int parameterIndex, Blob x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Blob", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setBlob(parameterIndex, x);
    }

    public void setBlob(InputStream inputStream) throws SQLException {
        setBlob(autoIncrement++, inputStream);
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("inputStream", inputStream.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setBlob(parameterIndex, inputStream);
    }

    public void setBlob(InputStream inputStream, long length) throws SQLException {
        setBlob(autoIncrement++, inputStream, length);
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("InputStream", inputStream.toString()));
        awareSqlValue.addValue(new Pair<>("length", Long.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setBlob(parameterIndex, inputStream, length);
    }

    public void setBoolean(boolean x) throws SQLException {
        setBoolean(autoIncrement++, x);
    }

    @Override
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("boolean", Boolean.toString(x)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setBoolean(parameterIndex, x);
    }

    public void setByte(byte x) throws SQLException {
        setByte(autoIncrement++, x);
    }

    @Override
    public void setByte(int parameterIndex, byte x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("byte", Byte.toString(x)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setByte(parameterIndex, x);
    }

    public void setBytes(byte[] x) throws SQLException {
        setBytes(autoIncrement++, x);

    }

    @Override
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("byte[]", Arrays.toString(x)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setBytes(parameterIndex, x);
    }

    public void setCharacterStream(Reader reader) throws SQLException {
        setCharacterStream(autoIncrement++, reader);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Reader", reader.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setCharacterStream(parameterIndex, reader);
    }

    public void setCharacterStream(Reader reader, int length) throws SQLException {
        setCharacterStream(autoIncrement++, reader, length);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Reader", reader.toString()));
        awareSqlValue.addValue(new Pair<>("length", Integer.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setCharacterStream(parameterIndex, reader, length);
    }

    public void setCharacterStream(Reader reader, long length) throws SQLException {
        setCharacterStream(autoIncrement++, reader, length);
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Reader", reader.toString()));
        awareSqlValue.addValue(new Pair<>("length", Long.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setCharacterStream(parameterIndex, reader, length);
    }

    public void setClob(Clob x) throws SQLException {
        setClob(autoIncrement++, x);
    }

    @Override
    public void setClob(int parameterIndex, Clob x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Clob", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setClob(parameterIndex, x);
    }

    public void setClob(Reader reader) throws SQLException {
        setClob(autoIncrement++,reader);
    }

    @Override
    public void setClob(int parameterIndex, Reader reader) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Reader", reader.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setClob(parameterIndex, reader);
    }

    public void setClob(Reader reader, long length) throws SQLException {
        setClob(autoIncrement++, reader, length);
    }

    @Override
    public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Reader", reader.toString()));
        awareSqlValue.addValue(new Pair<>("length", Long.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setClob(parameterIndex, reader, length);
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        delegate.setCursorName(name);
    }

    public void setDate(Date x) throws SQLException {
        setDate(autoIncrement++, x);
    }

    @Override
    public void setDate(int parameterIndex, Date x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Date", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setDate(parameterIndex, x);
    }

    public void setDate(Date x, Calendar cal) throws SQLException {
        setDate(autoIncrement++, x, cal);
    }

    @Override
    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Date", x.toString()));
        awareSqlValue.addValue(new Pair<>("Calendar", cal.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setDate(parameterIndex, x, cal);
    }

    public void setDouble(double x) throws SQLException {
        setDouble(autoIncrement++, x);
    }

    @Override
    public void setDouble(int parameterIndex, double x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Double", Double.toString(x)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setDouble(parameterIndex, x);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        delegate.setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        delegate.setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        delegate.setFetchSize(rows);
    }

    public void setFloat(float x) throws SQLException {
        setFloat(autoIncrement++, x);
    }

    @Override
    public void setFloat(int parameterIndex, float x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("float", Float.toString(x)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setFloat(parameterIndex, x);
    }

    public void setInt(int x) throws SQLException {
        setInt(autoIncrement++, x);
    }

    @Override
    public void setInt(int parameterIndex, int x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("int", Integer.toString(x)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setInt(parameterIndex, x);
    }

    public void setLong(long x) throws SQLException {
        setLong(autoIncrement++, x);
    }

    @Override
    public void setLong(int parameterIndex, long x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("long", Long.toString(x)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setLong(parameterIndex, x);
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        delegate.setMaxFieldSize(max);
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        delegate.setMaxRows(max);
    }

    public void setNCharacterStream(Reader value) throws SQLException {
        setNCharacterStream(autoIncrement++, value);
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Reader", value.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setNCharacterStream(parameterIndex, value);
    }

    public void setNCharacterStream(Reader value, long length) throws SQLException {
        setNCharacterStream(autoIncrement++, value, length);
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Reader", value.toString()));
        awareSqlValue.addValue(new Pair<>("length", Long.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setNCharacterStream(parameterIndex, value, length);
    }

    public void setNClob(NClob value) throws SQLException {
        setNClob(autoIncrement++, value);
    }

    @Override
    public void setNClob(int parameterIndex, NClob value) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("NClob", value.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setNClob(parameterIndex, value);
    }

    public void setNClob(Reader reader) throws SQLException {
        setNClob(autoIncrement++, reader);
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Reader", reader.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setNClob(parameterIndex, reader);
    }

    public void setNClob(Reader reader, long length) throws SQLException {
        setNClob(autoIncrement++, reader, length);
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Reader", reader.toString()));
        awareSqlValue.addValue(new Pair<>("length", Long.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setNClob(parameterIndex, reader, length);
    }

    public void setNString(String value) throws SQLException {
        setNString(autoIncrement++, value);
    }

    @Override
    public void setNString(int parameterIndex, String value) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("String", value));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setNString(parameterIndex, value);
    }

    public void setNull(int sqlType) throws SQLException {
        setNull(autoIncrement++, sqlType);
    }

    @Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("int", Integer.toString(sqlType)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setNull(parameterIndex, sqlType);
    }

    public void setNull(int sqlType, String typeName) throws SQLException {
        setNull(autoIncrement++, sqlType, typeName);
    }

    @Override
    public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("sqlType", Integer.toString(sqlType)));
        awareSqlValue.addValue(new Pair<>("typeName", typeName));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setNull(parameterIndex, sqlType, typeName);
    }

    public void setObject(Object x) throws SQLException {
        setObject(autoIncrement++, x);
    }

    @Override
    public void setObject(int parameterIndex, Object x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Object", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setObject(parameterIndex, x);
    }

    public void setObject(Object x, int targetSqlType) throws SQLException {
        setObject(autoIncrement++, x, targetSqlType);
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Object", x.toString()));
        awareSqlValue.addValue(new Pair<>("targetSqlType", Integer.toString(targetSqlType)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setObject(parameterIndex, x, targetSqlType);
    }

    public void setObject(Object x, int targetSqlType, int scaleOrLength) throws SQLException {
        setObject(autoIncrement++, x, targetSqlType, scaleOrLength);
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Object", x.toString()));
        awareSqlValue.addValue(new Pair<>("targetSqlType", Integer.toString(targetSqlType)));
        awareSqlValue.addValue(new Pair<>("scaleOrLength", Integer.toString(scaleOrLength)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        delegate.setPoolable(poolable);
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        delegate.setQueryTimeout(seconds);
    }

    public void setRef(Ref x) throws SQLException {
        setRef(autoIncrement++, x);
    }

    @Override
    public void setRef(int parameterIndex, Ref x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Ref", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setRef(parameterIndex, x);
    }

    public void setRowId(RowId x) throws SQLException {
        setRowId(autoIncrement++, x);
    }

    @Override
    public void setRowId(int parameterIndex, RowId x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("RowId", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setRowId(parameterIndex, x);
    }

    public void setShort(short x) throws SQLException {
        setShort(autoIncrement++, x);
    }

    @Override
    public void setShort(int parameterIndex, short x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("short", Short.toString(x)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setShort(parameterIndex, x);
    }

    public void setSQLXML(SQLXML xmlObject) throws SQLException {
        setSQLXML(autoIncrement++, xmlObject);
    }

    @Override
    public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("SQLXML", xmlObject.getString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setSQLXML(parameterIndex, xmlObject);
    }

    public void setString(String x) throws SQLException {
        setString(autoIncrement++, x);
    }

    @Override
    public void setString(int parameterIndex, String x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("String", x));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setString(parameterIndex, x);
    }

    public void setTime(Time x) throws SQLException {
        setTime(autoIncrement++, x);
    }

    @Override
    public void setTime(int parameterIndex, Time x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Time", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setTime(parameterIndex, x);
    }

    public void setTime(Time x, Calendar cal) throws SQLException {
        setTime(autoIncrement++, x, cal);
    }

    @Override
    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Time", x.toString()));
        awareSqlValue.addValue(new Pair<>("Calendar", cal.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setTime(parameterIndex, x, cal);
    }

    public void setTimestamp(Timestamp x) throws SQLException {
        setTimestamp(autoIncrement++, x);
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Timestamp", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setTimestamp(parameterIndex, x);
    }

    public void setTimestamp(Timestamp x, Calendar cal) throws SQLException {
        setTimestamp(autoIncrement++, x, cal);
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("Timestamp", x.toString()));
        awareSqlValue.addValue(new Pair<>("Calendar", cal.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setTimestamp(parameterIndex, x, cal);
    }

    public void setUnicodeStream(InputStream x, int length) throws SQLException {
        setUnicodeStream(autoIncrement++, x, length);
    }

    @Override
    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("InputStream", x.toString()));
        awareSqlValue.addValue(new Pair<>("length", Integer.toString(length)));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setUnicodeStream(parameterIndex, x, length);
    }

    public void setURL(URL x) throws SQLException {
        setURL(autoIncrement++, x);
    }

    @Override
    public void setURL(int parameterIndex, URL x) throws SQLException {
        AwareSqlValue awareSqlValue = new AwareSqlValue();

        awareSqlValue.addValue(new Pair<>("URL", x.toString()));

        parameterMap.put(parameterIndex, awareSqlValue);
        delegate.setURL(parameterIndex, x);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return delegate.unwrap(iface);
    }

    public Map<Integer, AwareSqlValue> getParameterMap() {
        return parameterMap;
    }

    public String printSqlStatement(String base_sql) {
        List<String> values = new ArrayList<>();
        base_sql = base_sql.replace("\\?", "%s");

        StringBuilder sbuilder;
        for (Map.Entry<Integer, AwareSqlValue> entry : parameterMap.entrySet()) {
            sbuilder = new StringBuilder("[");
            List<Pair<String, String>> currList = entry.getValue().getList();

            for (Pair<String, String> pair : currList) {
                sbuilder.append(String.format("%s : {%s}", pair.getKey(), pair.getValue()));
            }
            sbuilder.append("]");
            values.add(sbuilder.toString());
        }
        return String.format(base_sql, (Object) values.toArray(new String[0]));
    }
}
